<!DOCTYPE html>
<html>

<head>
  <style>
    table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 10px 5px;
    }

    td,
    th {
      padding: 10px;
      text-align: center;
      width: 10%;
      font-weight: bold;
    }

    th {
      border-bottom: 2px solid black;
      border-top: 2px solid gray;
    }

    .blue-cell {
      background-color: #0000FF;
      color: white;
    }

    .red-cell {
      background-color: #FF0000;
      color: white;
    }

    .highlight {
      background-color: rgb(72, 208, 65);
    }

    h1 {
      text-align: center;
      font-family: inherit;
    }
    #teamHighlight {
  border-radius: 12px;
  border: 1px solid grey;
  background-color: white;
  color: grey;
  padding: 8px 12px;
  font-size: 16px;
  outline: none;
}
  </style>
</head>

<body>
  <script>
    function handleWebhookEvent(eventData) {
      console.log("Received webhook event:", eventData);
      const resultDiv = document.getElementById("event-result");
      resultDiv.textContent = JSON.stringify(eventData, null, 2);
    }

    function setupWebhookSubscription() {
      const webhookEndpoint = "https://www.thebluealliance.com/api/v3/event/2023necmp2/matches/simple";
      const subscriptionData = {
        eventType: "example_event",
        secret: "your_secret_key",
      };

      fetch(webhookEndpoint, {
        method: "GET",
        headers: {
          "X-TBA-Auth-Key": "J43Af3iggAp3XBvsVaGm5Hbc7IlK6XR8W8WxQhLDlPiQbv6BbW8LWDvVg8Zj9fCV",
        },
      })
        .then((response) => response.json())
        .then((responseData) => {
          console.log(responseData)
          writeMatchResults(responseData);
          highlightCells();
        })
        .catch((error) => {
          console.error("Error setting up the webhook subscription:", error);
        });
    }

    function onPageLoad() {
      setupWebhookSubscription();
    }

    function sortAscending(list) {
      return list.sort((a, b) => a - b);
    }

    function writeMatchResults(data) {
  data.sort((a, b) => a.match_number - b.match_number);

  var element = document.createElement("table");
  var landing = document.getElementById("google.blah");
  landing.appendChild(element);
  element.id = "google.yay";

  var headerRow = document.createElement("tr");
  var headers = ["Match", "Winning Alliance", "Blue 1", "Blue 2", "Blue 3", "Red 1", "Red 2", "Red 3"];
  headers.forEach(headerText => {
    var headerCell = document.createElement("th");
    headerCell.appendChild(document.createTextNode(headerText));
    headerRow.appendChild(headerCell);
  });
  element.appendChild(headerRow);

  const addedTeams = new Set(); // Create a set to keep track of added teams

  for (let i = 0; i < data.length; i++) {
    if (data[i].comp_level == "qm") {
      const table_line = document.createElement("tr");
      element.appendChild(table_line);

      var columns = [
        "Match " + data[i].match_number,
        data[i].winning_alliance,
        data[i].alliances.blue.team_keys[0].substring(3, 7),
        data[i].alliances.blue.team_keys[1].substring(3, 7),
        data[i].alliances.blue.team_keys[2].substring(3, 7),
        data[i].alliances.red.team_keys[0].substring(3, 7),
        data[i].alliances.red.team_keys[1].substring(3, 7),
        data[i].alliances.red.team_keys[2].substring(3, 7)
      ];

      columns.forEach((text, index) => {
        const cell = document.createElement("td");
        cell.appendChild(document.createTextNode(text));
        if (index >= 2 && index <= 4) {
          cell.classList.add("blue-cell");
          cell.addEventListener("click", () => cellClickHandler(text));
        } else if (index >= 5 && index <= 7) {
          cell.classList.add("red-cell");
          cell.addEventListener("click", () => cellClickHandler(text));
        }
        table_line.appendChild(cell);
      });

      const teams = [
        data[i].alliances.blue.team_keys[0].substring(3, 7),
        data[i].alliances.blue.team_keys[1].substring(3, 7),
        data[i].alliances.blue.team_keys[2].substring(3, 7),
        data[i].alliances.red.team_keys[0].substring(3, 7),
        data[i].alliances.red.team_keys[1].substring(3, 7),
        data[i].alliances.red.team_keys[2].substring(3, 7)
      ];

      for (let team of teams) {
        addedTeams.add(team); // Add the team to the set of added teams
      }
    }
  }

  // Convert the set to an array and sort it in ascending order
  const sortedTeams = Array.from(addedTeams).sort((a, b) => a - b);

  // Populate the dropdown
  const dropdown = document.getElementById("teamHighlight");
  for (let team of sortedTeams) {
    const option = document.createElement("option");
    option.value = team;
    option.textContent = team;
    if (team === "2423") {
      option.selected = true;
    }
    dropdown.appendChild(option);
  }
}



    function highlightCells() {
      const selectedTeam = document.getElementById("teamHighlight").value;
      const tableCells = document.querySelectorAll("td");
      tableCells.forEach(cell => {
        cell.classList.remove("highlight"); // remove previous highlights
        // Ensure only exact matches are highlighted
        if (cell.textContent.trim() === selectedTeam) {
          cell.classList.add("highlight");
        }
      });
    }

    function cellClickHandler(teamNumber) {
      // Ensure only numeric values trigger a dropdown update and highlight
      if (!isNaN(teamNumber)) {
        const dropdown = document.getElementById("teamHighlight");
        dropdown.value = teamNumber;  // Update the dropdown selection
        highlightCells();  // Highlight cells based on the new selection
      }
    }

    window.addEventListener("load", onPageLoad);
  </script>

  <div style ="text-align: center;">
    <h1>Matches (DCMP -- WILSON)</h1>
    <label for="teamHighlight">Select a team to highlight: </label>
    <select id="teamHighlight" onchange="highlightCells()"></select>
    <pre id="event-result"></pre>
  </div>
  <div>
    <pre id="google.blah"></pre>
  </div>
  <footer style="text-align: center; margin-top: 20px; font-family: Arial;">
    <i>Made with love in cooperation with <s>your future overlord ðŸ˜ˆ</s> GPT-4</i><br>
    <span>&copy; <script>document.write(new Date().getFullYear());</script> Watertown High School Robotics</span>
  </footer>
</body>
</html>